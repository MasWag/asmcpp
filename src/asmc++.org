* A Simple Monitor for C++ (asm.c++)

This document shows the source code of asm.c++. The following shows the outline of the code.

#+BEGIN_SRC sh :tangle asmc++ :noweb yes :shebang #!/bin/sh

  <<CHECK_ASPECT_C>>

  <<CHECK_ARGS>>

  # Generate the Aspect C++ code
  ASPECT_TMP=$(mktemp "$(dirname "$input_file")"/"$input_file".XXXXXX.ah)
  <<GENERATE_HEADER>>
  <<GENERATE_BODY>>
  <<GENERATE_FOOTER>>

  # weave monitor
  <<WEAVE_MONITOR>>
#+END_SRC

** Usage
  :PROPERTIES:
  :header-args: :noweb-ref USAGE_TEXT
  :END:

The usage of asm.c++ is as follows. We note that in the current version, the order of the arguments is fixed.

#+BEGIN_SRC text
Usage: asmc++ [MONITORED_FILE] -c [CONF_FILE] -o [OUTPUT_FILE]
Example: asmc++ sample.cc -c sample.conf -o sample_monitored.cc
#+END_SRC

** Check the arguments
  :PROPERTIES:
  :header-args: :noweb-ref CHECK_ARGS
  :END:

First, we check the arguments.

The number of the arguments must be at least 5.

#+BEGIN_SRC sh :noweb yes
  if [ $# -lt 5 ]; then
      echo "Error: not sufficient arguments" > /dev/stderr
      cat <<EOF > /dev/stderr 
  <<USAGE_TEXT>>
  EOF
      exit 1
#+END_SRC

Moreover, the second and forth arguments must be =-c= and =-o=, respectively.

#+BEGIN_SRC sh :noweb yes
  elif [ "$2" != "-c" ] || [ "$4" != "-o" ]; then
      echo "Error: invalid usage" > /dev/stderr
      cat <<EOF > /dev/stderr 
  <<USAGE_TEXT>>
  EOF
      exit 1
  fi
#+END_SRC

When the arguments are given correctly, we assign the arguments to the corresponding variables.

#+BEGIN_SRC sh :noweb yes
  input_file=$1
  conf_file=$3
  output_file=$5
#+END_SRC

** Check the existence of Aspect C++
  :PROPERTIES:
  :header-args: :noweb-ref CHECK_ASPECT_C
  :END:

Then, we check if Aspect C++ is installed.

#+BEGIN_SRC sh
  if ! command -v ag++ > /dev/null; then
      echo "asm.C++ Error: ag++ is not found." > /dev/stderr 
      echo "asm.C++ Error: asm.C++ requires that ag++ is installed under a pathed directory." > /dev/stderr 
      exit 1
  fi
  AG=$(command -v ag++)
#+END_SRC

#+RESULTS:
: /usr/bin/ag++

** Monitor generation

Then, we generate the Aspect C++ code.

*** Generate the header and footer

For the header and the footer, since the result is fixed, we simply insert the fixed texts.

#+NAME: GENERATE_HEADER
#+BEGIN_SRC sh :noweb yes
cat <<EOF > "$ASPECT_TMP"
<<HEADER>>
EOF
#+END_SRC

#+NAME: GENERATE_FOOTER
#+BEGIN_SRC sh :noweb yes
cat <<EOF >> "$ASPECT_TMP"
<<FOOTER>>
EOF
#+END_SRC

*** Generate the body
  :PROPERTIES:
  :header-args: :noweb-ref GENERATE_BODY
  :END:

Then, we generate the main part of the Aspect C++ code. The generation is done by the AWK code.

#+BEGIN_SRC sh :results output :noweb yes
  TMP=$(mktemp /tmp/asmc++.XXXXXX.awk)
  cat << 'EOF' >> "$TMP" 
  <<GENERATE_AWK>>
  EOF

  chmod +x "$TMP"
  awk -f "$TMP" < "$conf_file" >> "$ASPECT_TMP"
  rm "$TMP"
#+END_SRC

#+RESULTS:

**** AWK code for the Aspect C++ code generation
  :PROPERTIES:
  :header-args: :noweb-ref GENERATE_AWK
  :END:

The following shows the AWK code to generate the body of the Aspect C++ code from the input configuration file.

Since the entries in the input configuration file are separated by ",", we let the field separator ",".

#+BEGIN_SRC awk
  BEGIN {
    FS = ",";
  }
#+END_SRC

In this AWK script, we have two variables: =name= and =args=.
=name= is a string showing the name of the monitored function and =args= is an array containing the arguments of the monitored function without the types.
We read the input configuration file and assign these variables. 
The first field is the name of the monitored function.
For the remaining fields, we assign the longest suffix not containing the space to the array =args=.

#+BEGIN_SRC awk
  { 
      name = $1;
      for (i = 2; i <= NF; i++) {
          match($i, /[^ ]*$/);
          args[i] = substr($i, RSTART, RLENGTH);
      }
  }
#+END_SRC

From here, we output the body of the Aspect C++ code. First, we generate the beginning of the advice declaration.

#+BEGIN_SRC awk
  {
      printf "  advice execution(\"%% %s(...)\")", name;
  }
#+END_SRC

Since we read the arguments, we check the type of the arguments when the monitored function gets arguments.

#+BEGIN_SRC awk
  NF > 1 {
      printf " && args(";
      for (i = 2; i <= NF; i++) {
          printf "%s",args[i];
          if (i < NF) {
              printf ", "
          }
      }
      printf ")" 
  }
#+END_SRC

Then, we capture the arguments of the monitored function.

#+BEGIN_SRC awk
  {
      printf " : before (";
      for (i = 2; i <= NF; i++) {
          printf "%s",$i;
          if (i < NF) {
              printf ", "
          }
      }
      printf ") {\n" 
  }
#+END_SRC

Finally, we print the arguments of the monitored function.

#+BEGIN_SRC awk
  {
      printf "    std::cout << \"ASM: %s \"", name;
      for (i = 2; i <= NF; i++) {
          printf " << \", %s: \" << %s", args[i], args[i];
      }
      printf " << std::endl;\n  }\n\n" 
  }
#+END_SRC


** Weave the monitored file
   :PROPERTIES:
   :header-args: :noweb-ref WEAVE_MONITOR
   :END:

Then, we weave the monitored file by using the generated Aspect C++ code.

#+BEGIN_SRC sh
cat "$ASPECT_TMP"
ag++ "$input_file" -p "$(dirname $input_file)" --keep_woven --weave_only -o "$output_file"
rm "$ASPECT_TMP"
#+END_SRC

** Templates

Here are the string constants for the header and the footer of the generated Aspect C++ code.

*** Header
   :PROPERTIES:
   :header-args: :noweb-ref HEADER
   :END:

#+BEGIN_SRC c++
#include <iostream>

aspect ASM {
#+END_SRC

*** Footer
  :PROPERTIES:
  :header-args: :noweb-ref FOOTER
  :END:


#+BEGIN_SRC c++
};
#+END_SRC

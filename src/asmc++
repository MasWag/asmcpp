#!/bin/sh
if ! command -v ag++ > /dev/null; then
    echo "asm.C++ Error: ag++ is not found." > /dev/stderr 
    echo "asm.C++ Error: asm.C++ requires that ag++ is installed under a pathed directory." > /dev/stderr 
    exit 1
fi
AG=$(command -v ag++)

if [ $# -lt 5 ]; then
    echo "Error: not sufficient arguments" > /dev/stderr
    cat <<EOF > /dev/stderr 
Usage: asmc++ [MONITORED_FILE] -c [CONF_FILE] -o [OUTPUT_FILE]
Example: asmc++ sample.cc -c sample.conf -o sample_monitored.cc
EOF
    exit 1
elif [ "$2" != "-c" ] || [ "$4" != "-o" ]; then
    echo "Error: invalid usage" > /dev/stderr
    cat <<EOF > /dev/stderr 
Usage: asmc++ [MONITORED_FILE] -c [CONF_FILE] -o [OUTPUT_FILE]
Example: asmc++ sample.cc -c sample.conf -o sample_monitored.cc
EOF
    exit 1
fi
input_file=$1
conf_file=$3
output_file=$5

# Generate the Aspect C++ code
ASPECT_TMP=$(mktemp "$(dirname "$input_file")"/"$input_file".XXXXXX.ah)
cat <<EOF > "$ASPECT_TMP"
#include <iostream>

aspect ASM {
EOF
TMP=$(mktemp /tmp/asmc++.XXXXXX.awk)
cat << 'EOF' >> "$TMP" 
BEGIN {
  FS = ",";
}
{ 
    match($1, /[^ ]*$/);
    return_type = substr($1, 1, RSTART-1);
    name = substr($1, RSTART, RLENGTH);
    for (i = 2; i <= NF; i++) {
        match($i, /[^ ]*$/);
        args[i] = substr($i, RSTART, RLENGTH);
    }
}
length(return_type) && !match(return_type, /void/) {
    printf "  advice execution(\"%% %s(...)\") && result(res) : after (%s res) {\n", name, return_type;
    printf "    std::cout << \"ASM: %s\" << \", result: \" << res << std::endl;\n", name;
    print "  }"
}
match(return_type, /void/) {
    printf "  advice execution(\"%% %s(...)\") : after () {\n", name;
    printf "    std::cout << \"ASM: %s\" << std::endl;\n", name;
    print "  }"
}
{
    printf "  advice execution(\"%% %s(...)\")", name;
}
NF > 1 {
    printf " && args(";
    for (i = 2; i <= NF; i++) {
        printf "%s",args[i];
        if (i < NF) {
            printf ", "
        }
    }
    printf ")" 
}
{
    printf " : before (";
    for (i = 2; i <= NF; i++) {
        printf "%s",$i;
        if (i < NF) {
            printf ", "
        }
    }
    printf ") {\n" 
}
{
    printf "    std::cout << \"ASM: %s\"", name;
    for (i = 2; i <= NF; i++) {
        printf " << \", %s: \" << %s", args[i], args[i];
    }
    printf " << std::endl;\n  }\n\n" 
}
EOF

chmod +x "$TMP"
awk -f "$TMP" < "$conf_file" >> "$ASPECT_TMP"
rm "$TMP"
cat <<EOF >> "$ASPECT_TMP"
};
EOF

# weave monitor
$AG "$input_file" -p "$(dirname "$input_file")" --keep_woven --weave_only -o "$output_file"
rm "$ASPECT_TMP"
